@model ASP.Models.User.UserSignupPageModel;
@{
    ViewData["Title"] = "Sign Up";
}

<div class="text-center">
    <h1 class="display-4">User Sign Up</h1>
</div>
@if(Model.FormModel != null && Model.FormErrors?.Count == 0)
{
    <p class="alert alert-info" role="alert">
        Success. Entering the system
    </p>
}
else
{
    string classAddon = "";
    string? errorMessage = null;
    string? value = null;
     
    @if(Model.FormModel != null)
    {
        <b>Form data is present, @(Model.FormErrors?.Count ?? 0) errors</b>
    }
    else
    {
        <i>No Data</i>
    }
    @if(Model?.FormErrors?.ContainsKey("500") ?? false)
    {
        <p class="alert alert-danger" role="alert">
            @Model?.FormErrors["500"];
        </p>
    }

    <form action="/User/Register" method="post" enctype="application/x-www-form-urlencoded">
        <div class="row">
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("UserName") ? "is-invalid" : "is-valid");
                        errorMessage = null;
                        Model?.FormErrors?.TryGetValue("UserName", out errorMessage);
                        value = (Model?.FormErrors?.Count ?? 0) > 0 ? Model?.FormModel?.UserName : null;
                    }
                    <span class="input-group-text" id="user-name-addon"><i class="bi bi-person"></i></span>
                    <input name="user-name" type="text" class="form-control @classAddon" placeholder="Username"
                    aria-label="Username" aria-describedby="user-name-addon" value="@value"/>
                    <div class="invalid-feedback">
                        @errorMessage;
                    </div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("UserEmail") ? "is-invalid" : "is-valid");
                        errorMessage = null;
                        Model?.FormErrors?.TryGetValue("UserEmail", out errorMessage);
                        value = (Model?.FormErrors?.Count ?? 0) > 0 ? Model?.FormModel?.UserEmail : null;
                    }
                    <span class="input-group-text" id="user-email-addon"><i class="bi bi-envelope-at"></i></span>
                    <input name="user-email" type="email" class="form-control @classAddon" placeholder="E-mail"
                           aria-label="E-mail" aria-describedby="user-email-addon" value="@value">
                    <div class="invalid-feedback">
                        @errorMessage;
                    </div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("Birthdate") ? "is-invalid" : "is-valid");
                        errorMessage = null;
                        Model?.FormErrors?.TryGetValue("Birthdate", out errorMessage);
                        value = (Model?.FormErrors?.Count ?? 0) > 0 ? Model?.FormModel?.Birthdate?.ToString("yyyy-MM-dd") : null;
                    }
                    <span class="input-group-text" id="birthdate-addon"><i class="bi bi-cake2"></i></span>
                    <input name="birthdate" type="date" class="form-control @classAddon" placeholder="Birthdate"
                           aria-label="Birthdate" aria-describedby="birthdate-addon" value="@value">
                    <div class="invalid-feedback">
                        @errorMessage;
                    </div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("UserLogin") ? "is-invalid" : "is-valid");
                        errorMessage = null;
                        Model?.FormErrors?.TryGetValue("UserLogin", out errorMessage);
                        value = (Model.FormErrors?.Count ?? 0) > 0 ? Model?.FormModel?.UserLogin : null;
                    }
                    <span class="input-group-text" id="user-login-addon"><i class="bi bi-key"></i></span>
                    <input name="user-login" type="text" class="form-control @classAddon" placeholder="Login"
                           aria-label="Userlogin" aria-describedby="user-login-addon" value="@value">
                    <div class="invalid-feedback">
                        @errorMessage
                    </div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("UserPassword") ? "is-invalid" : "is-valid");
                        errorMessage = null;
                        Model?.FormErrors?.TryGetValue("UserPassword", out errorMessage);
                    }
                    <span class="input-group-text" id="user-password-addon"><i class="bi bi-lock"></i></span>
                    <input name="user-password" type="password" class="form-control @classAddon" placeholder="Password"
                           aria-label="Userpassword" aria-describedby="user-password-addon">
                    <div class="invalid-feedback">
                        @errorMessage
                    </div>
                </div>
            </div>
            <div class="col col-sm-12 col-lg-6 col-xxl-4">
                <div class="input-group mb-3">
                    @{
                        classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("UserRepeat") ? "is-invalid" : "is-valid");
                        errorMessage = null;
                        Model?.FormErrors?.TryGetValue("UserRepeat", out errorMessage);
                    }
                    <span class="input-group-text" id="user-repeat"><i class="bi bi-unlock"></i></span>
                    <input name="user-repeat" type="password" class="form-control @classAddon" placeholder="Repeat"
                           aria-label="Repeat" aria-describedby="user-repeat-addon">
                    <div class="invalid-feedback">
                        @errorMessage
                    </div>
                </div>
            </div>
        </div>

        <div class="form-check mb-3">
            @{
                classAddon = Model?.FormErrors == null ? "" : (Model.FormErrors.ContainsKey("Agree") ? "is-invalid" : "is-valid");
                errorMessage = null;
                Model?.FormErrors?.TryGetValue("Agree", out errorMessage);
            }
            <input name="agree" class="form-check-input @classAddon" type="checkbox" value="true" id="checkDefault">
            <label class="form-check-label" for="checkDefault">
                I will not violate anything
            </label>
            <div class="invalid-feedback">
                @errorMessage
            </div>
        </div>
        <button name="btn" value="send" type="submit" class="btn btn-primary"><i class="bi bi-send-fill"></i> Submit</button>
    </form>
}

<h2>Working with Forms</h2>
<p class="alert alert-warning" role="alert">
    Forms send data. It means the page update (after sending the form) will cause another data forwarding. 
    The same happens upon returning to the page (via backward navigation)
</p>
<p>
    "Data reset" method is more for practical usage. Data processing occurs in two stages:
    1. Form's data is received and is redirected (the first query is not processed)
    2. Repeated query without parameters updates saved data and processes it.
</p>
<pre>
    [Browser]     POST{FormData}     [Server]
    (form)----------------------------->| - *save* - Session
                   302 Redirect         |    | 
      |<---------------------------------    |       ! Do not send HTML to the query with a form
      |          Get(No data)                | 
      |--------------------------------->  Process
                    HTML                     |
      <--------------------------------------
</pre>
<p>
    'Server sessions' - is a special mechanism to distinguish queries and saving data on the server's side that are related
    to a particular query.
    Sessions are realized via Cookies (http entities that are automatically forwarded by browser after receiving them from the server)
</p>
<pre>
    [Browser]                        [Server]
    (1st Query) ----------------------->  Enables a session, creates its ID
                    Set-Cookie: x=ID      Sends it to client
    *save*  <---------------------------  
                    Cookie: x=ID          Checks whether the session with this ID is registered
    (2nd Query) ----------------------->  If yes, restores its data

</pre>